# -*- coding: utf-8 -*-
"""water_waste.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1I1_uiubEY2WOurufSV-SByOZS-gZbCI_
"""

import zipfile
import os
import shutil

zip_file_path = '/content/Neural_Ocean.zip'
extract_folder = '/content/dataset/'

# Create the extraction folder if it doesn't exist
os.makedirs(extract_folder, exist_ok=True)

# Use a smaller chunk size to reduce memory usage during streaming
chunk_size = 4096  # Adjust if needed

with zipfile.ZipFile(zip_file_path, 'r') as zip_ref:
    for member in zip_ref.infolist():
        # Check if the member is a directory
        if member.is_dir():
            # If it's a directory, create it
            os.makedirs(os.path.join(extract_folder, member.filename), exist_ok=True)
        else:
            # If it's a file, extract it using streaming
            with zip_ref.open(member) as source, open(os.path.join(extract_folder, member.filename), 'wb') as target:
                # Copy data in chunks
                while True:
                    chunk = source.read(chunk_size)
                    if not chunk:
                        break
                    target.write(chunk)

print("Dataset extracted successfully!")

!pip install ultralytics

from ultralytics import YOLO

# Load a YOLOv11n pre-trained model (replace with correct path if needed)
model = YOLO("yolo11n.pt")

from ultralytics import YOLO

# Load a pre-trained YOLOv11 model (or YOLOv5 model if using that)
model = YOLO("yolo11n.pt")  # Replace with the correct model weights file

# Train the model using your custom dataset
results = model.train(data="/content/dataset/data.yaml", epochs=10, imgsz=640)

# Print training results
print(results)

from sklearn.metrics import precision_score, recall_score, f1_score, accuracy_score, confusion_matrix
import seaborn as sns
import matplotlib.pyplot as plt
import numpy as np

# Run inference
results = model('/content/dataset/test/images/7_JPG_jpg.rf.c73c6cc42828be1d9a13a8a520607ca8.jpg')  # Replace with your test image path
if results:
  # Display the first detection (if available)
  # Modify this logic to iterate and display all detections if needed
  results[0].show()
else:
  print("No objects detected in the image.")